setwd("/media/hermann/Tonpi/tonpi/Collegecourses/CWU/Graduate School/Winter 2019/CS 567/Projects/Project1/3R")
inputsProject1 <- read.delim("project1_inputs.txt", header = TRUE, sep = "\t", dec = ".", stringsAsFactors=FALSE) #read the inputs values from the project1_inputs.txt file
print (inputsProject1)
#this file is to run 

#making life table based on csv files
source("life_table.R")


#plot
#install.packages("ggplot2")
library(ggplot2)
library(reshape)
x11()

myGraph <- ggplot(lifeTable, aes(ages, A_x))
myGraph <- myGraph + geom_point()
print(myGraph)
ggsave(filename = "images/A_x Vs Ages.png", plot = myGraph)



inputAges = as.numeric(inputsProject1[inputsProject1$label == "inputAges", c("value")])
inputBenefit = as.numeric(inputsProject1[inputsProject1$label == "inputBenefit", c("value")])
nsp <- lifeTable[lifeTable$ages == inputAges, c("A_x")]*inputBenefit
print(paste("input Ages: ", inputAges))
print(paste("Whole Life Net Single Premium: ", nsp))




#-------------------Calculating Probability of Dead Curve--------------

#calculate probability of (x) lives t years  t_p_x where x = inputAges
previousAgeP <- lifeTable[ages == (inputAges - 1), c("t_p_x0")]
if (inputAges > 0) {
  pLives <- lifeTable[ages >= inputAges, c("t_p_x0")]/previousAgeP
} else {
  pLives <- lifeTable[ages >= inputAges, c("t_p_x0")]
}

pLivesAges <- lifeTable[ages >= inputAges, c("ages")]
pCurveX <- data.frame(pLivesAges, pLives)

#calculate probability t_1_q_x that x survives t years and dies within 1 year
pCurveXRow <- nrow(pCurveX)

#probability of dead based on input age
for (i in 1:(pCurveXRow-1)) {
  pCurveX$t_1_q_x[i] <- pCurveX$pLives[i] - pCurveX$pLives[i+1] #i = u in the pdf   1 = t in pdf
}
pCurveX$t_1_q_x[pCurveXRow] <- pCurveX$pLives[pCurveXRow] # last line
#print(sum(pCurveX$t_1_q_x))

#generate random dies based on input age
#s <- sample(pCurveX$pLivesAges, 1000, replace = T, pCurveX$t_1_q_x)
#ttt <- data.frame(s)
#myGraph <- ggplot(ttt, aes(s))
#myGraph + geom_histogram()


#plot lives probability based on input age
myGraph <- ggplot(pCurveX, aes(pLivesAges, pLives))
myGraph + geom_point()
ggsave(filename = "images/lives probability based on input age.png", plot = myGraph)

x11()
#plot t_1_q_x based on input age
myGraph <- ggplot(pCurveX, aes(pLivesAges, t_1_q_x))
myGraph <- myGraph + geom_point() + labs(title = "probability of (x) survive t years and die next year")
print(myGraph)
ggsave(filename = "images/probability of (X) survive t years and die next year.png", plot = myGraph)
#----------------------------------------------





#----------now creating a block of 10000 people who are in diffrent ages and want diffrent benefits


BussinessBlock <- function(rAge,rBenefit) { 
  netSinglePremium <- lifeTable[lifeTable$ages == rAge, c("A_x")]*rBenefit
  return(netSinglePremium)
}

bAge <- 0
bBen <- 0
bNps <- 0
bFAge <- 0
maxAges <- max(lifeTable$ages)
lifeTableAges <- lifeTable$ages[ages < maxAges]# avoid picking max ages

inputNumberClients <- as.numeric(inputsProject1[inputsProject1$label == "inputNumberClients", c("value")])

# ---------------------- looping 10000 -------------------------------------
#lifeTableAges <- data.frame(Age=ages) # creating a data frame that contains the ages 

print("---------Calculating Lifetimes-----------")
print(paste("Number of clients: ", inputNumberClients))
for (i in 1:inputNumberClients){ # 10,000 (whole life) incurances with Net Single Premium
  
  randomAge <-  sample(lifeTableAges, 1) 
  randomBenefit <- sample.int(9000, 1, replace=TRUE) + 1000 # picking one randonm integer from range $1000-$1000000 benefit
  bAge[i] <- randomAge # concatenate
  bBen[i] <- randomBenefit # concatenate
  bNps[i] <- BussinessBlock(randomAge,randomBenefit) # calling the function to calculate the net single premium then concatenate

  #--------calculate random dies based on mortality table ----------   this part can be improved in efficiency
  #calculate probability of (x) lives t years  t_p_x where x = inputAges
  previousAgeP <- lifeTable[ages == (randomAge - 1), c("t_p_x0")]
  if (randomAge > 0) {
    pLives <- lifeTable[ages >= randomAge, c("t_p_x0")]/previousAgeP
  } else {
    pLives <- lifeTable[ages >= randomAge, c("t_p_x0")]
  }
  
  pLivesAges <- lifeTable[ages >= randomAge, c("ages")]
  pCurveX <- data.frame(pLivesAges, pLives)
  
  #calculate probability t_1_q_x that x survives t years and dies within 1 year
  pCurveXRow <- nrow(pCurveX)
  
  #probability of dead based on input age
  for (j in 1:(pCurveXRow-1)) {
    pCurveX$t_1_q_x[j] <- pCurveX$pLives[j] - pCurveX$pLives[j+1] #i = u in the pdf   1 = t in pdf
  }
  pCurveX$t_1_q_x[pCurveXRow] <- pCurveX$pLives[pCurveXRow] # last line
  
  
  #generate random dies based on input age
  randomFinalAge <- sample(pCurveX$pLivesAges, 1, replace = T, pCurveX$t_1_q_x)
  bFAge[i] <- randomFinalAge
  
  #myGraph <- ggplot(pCurveX, aes(pLivesAges, t_1_q_x))
  #print(myGraph + geom_point() + geom_point(aes(x=randomFinalAge, y=0.02), color="red"))
  #Sys.sleep(2)
  
  
}



bDataFrame <- data.frame(Age = bAge, Benefit = bBen, NetSinglePremium = bNps, Die = bFAge) #Creating the final dataframe
bDataFrame$SurviveYears <- bDataFrame$Die - bDataFrame$Age

#write.csv(bDataFrame, file="BusinessData.csv",  append = FALSE) # creating the CSV file, each time we run the code new file will be created and the older file will be replaced 
write.table(bDataFrame, file="BusinessData.csv", row.names=F, col.names=T, append=F, sep=",")


paymentTable <- bDataFrame[c("SurviveYears", "Benefit")]
paymentTable <- aggregate(. ~SurviveYears, data=paymentTable, sum, na.rm = TRUE)

investmentInterest <- as.numeric(inputsProject1[inputsProject1$label == "investmentInterest", c("value")])


year <- 0
money <- sum(bDataFrame$NetSinglePremium)
earnInterest <- money*investmentInterest

paymentRec <- 0

#find payment of the year
payment <- paymentTable[paymentTable$SurviveYears == 0, c("Benefit")] 
if(length(payment) == 0){ #sometime there is no payment for specific year, so convert numeric(0) to 0
  paymentRec <- 0
}else{
  paymentRec <- payment
}

nYears <- max(paymentTable$SurviveYears)

for (i in 1:nYears) {
  year[i+1] <- i

  money[i+1] <- money[i] + earnInterest[i] - paymentRec[i]
  
  if(money[i+1] > 0){ #only calculate earnInterest when money > 0
    earnInterest[i+1] <- money[i+1]*investmentInterest
  }else {
    earnInterest[i+1] <- 0
  }
  
  #find payment of next year
  payment <- paymentTable[paymentTable$SurviveYears == i, c("Benefit")] 
  if(length(payment) == 0){ #sometime there is no payment for specific year, so convert numeric(0) to 0
    paymentRec[i+1] <- 0
  }else{
    paymentRec[i+1] <- payment
  }
  
}
#paymentRec[i+1] <- 0 #last year payment = 0
profitTable <- data.frame(year, money, earnInterest, paymentRec)

# -------------- print business data frame -------------------------------
x11()
myGraph <- ggplot(bDataFrame, aes(Age))
myGraph <- myGraph + geom_histogram() + labs(title = "Random Ages Histogram")
print(myGraph)
ggsave(filename = "images/Random Ages Histogram.png", plot = myGraph)

x11()
myGraph <- ggplot(bDataFrame, aes(Benefit))
myGraph <- myGraph + geom_histogram() + labs(title = "Random Benefit Histogram")
print(myGraph)
ggsave(filename = "images/Random Benefit Histogram.png", plot = myGraph)

x11()
myGraph <- ggplot(bDataFrame, aes(NetSinglePremium))
myGraph <- myGraph + geom_histogram() + labs(title = "Random Net Single Premium Histogram")
print(myGraph)
ggsave(filename = "images/Random Net Single Premium Histogram.png", plot = myGraph)

x11()
myGraph <- ggplot(bDataFrame, aes(Die))
myGraph <- myGraph + geom_histogram() + labs(title = "Random Dead Ages Histogram")
print(myGraph)
ggsave(filename = "images/Random Dead Ages Histogram.png", plot = myGraph)

x11()
myGraph <- ggplot(bDataFrame, aes(SurviveYears))
myGraph <- myGraph + geom_histogram() + labs(title = "Random Survive Years Histogram")
print(myGraph)
ggsave(filename = "images/Random Survive Years Histogram.png", plot = myGraph)


#------------------- print profit graph -------------------------------------
meltProfitTable <- melt(profitTable, id="year")
x11()
myGraph <- ggplot(meltProfitTable, aes(x = year, y = value, colour = variable))
myGraph <- myGraph + geom_point() + labs(title="Company Profit Graph", y = "Money [$US]") + 
  scale_color_manual(labels = c("Profit", "Interest", "Payment"), values = c("Green","blue", "red")) 
print(myGraph)
ggsave(filename = "images/Company Profit Graph.png", plot = myGraph)
#myGraph  <- ggplot() + geom_point(data=profitTable, aes(x=year, y=money), color = "black") +
#  geom_point(data=profitTable, aes(x=year, y=paymentRec), color = "red") +
#  geom_point(data=profitTable, aes(x=year, y=earnInterest), color = "blue") +
#  labs(title="Profit Graph")
#print(myGraph)


#print(sum(profitTable$paymentRec))
#print(sum(bDataFrame$Benefit))
#print(sum(paymentTable$Benefit))
#---------------------------------


#----------------------------------


endTime <- Sys.time() # calulating the ending time
totalTime <- endTime - startTime #calulating the total time
print(totalTime) # printing the total time